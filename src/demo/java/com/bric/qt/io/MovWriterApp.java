/*
 * @(#)MovWriterApp
 *
 * $Date: 2015-03-11 06:41:06 +0100 (Mi, 11 MÃ¤r 2015) $
 *
 * Copyright (c) 2012 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.qt.io;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.TitledBorder;

import com.bric.blog.Blurb;
import com.bric.blog.ResourceSample;
import com.bric.io.SuffixFilenameFilter;
import com.bric.util.ObservableList;

/** A minimal UI that creates .mov files using the MovWriter classes.
 *
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/MovWriterApp/sample.png" alt="new&#160;com.bric.qt.io.MovWriterApp(&#160;)">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@Blurb (
filename = "MovWriter",
title = "Movies: Writing MOV Files Without QuickTime",
releaseDate = "June 2008",
summary = "This article presents a class that can write a .mov file as a series of " +
"images and PCM audio.\n" +
"<p>This movie uses a combination of JPG/PNG and WAV encoding, which is very poor " +
"compression.  But this format is not subject to nasty patent/royalty issues.",
link = "http://javagraphics.blogspot.com/2008/06/movies-writing-mov-files-without.html",
sandboxDemo = false
)
@ResourceSample( sample="new com.bric.qt.io.MovWriterApp( )" )
public class MovWriterApp extends JFrame {
	private static final long serialVersionUID = 1L;

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				MovWriterApp app = new MovWriterApp();
				app.pack();
				app.setLocationRelativeTo(null);
				app.setVisible(true);
			}
		});
	}
	
	JPanel visualPanel = new JPanel(new GridBagLayout());
	JButton exportButton = new JButton("Export");
	JSpinner framesSpinner = new JSpinner(new SpinnerNumberModel(100,1,50000,10));
	JSpinner fpsSpinner = new JSpinner(new SpinnerNumberModel(20,1,30,1));
	JComboBox formatComboBox = new JComboBox();
	JSpinner jpegQuality = new JSpinner(new SpinnerNumberModel(.9,.1,1,.05));
	JCheckBox writeAudio = new JCheckBox("Write Remaining Audio");

	JPanel audioPanel = new JPanel(new GridBagLayout());
	ObservableList<File> audioFileList = new ObservableList<File>();
	JList audioFiles = new JList( audioFileList.getListModelEDTMirror() );
	JButton addButton = new JButton("Add");
	
	public MovWriterApp() {
		super("MovWriterApp");
		visualPanel.setBorder(new TitledBorder("Visual Track"));
		audioPanel.setBorder(new TitledBorder("Audio Track"));
		
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0;
		c.anchor = GridBagConstraints.EAST;
		c.insets = new Insets(7,7,7,7);
		visualPanel.add(new JLabel("Frames:"), c);
		c.gridy++;
		visualPanel.add(new JLabel("FPS:"), c);
		c.gridy++;
		visualPanel.add(new JLabel("Format:"), c);
		c.gridy++;
		visualPanel.add(new JLabel("Quality:"), c);
		c.anchor = GridBagConstraints.WEST;
		c.gridx++; c.gridy = 0; c.fill = GridBagConstraints.HORIZONTAL;
		visualPanel.add(framesSpinner, c);
		c.gridy++;
		visualPanel.add(fpsSpinner, c);
		c.gridy++;
		visualPanel.add(formatComboBox, c);
		c.gridy++;
		visualPanel.add(jpegQuality, c);

		c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.weightx = 1; c.weighty = 1;
		audioPanel.add(new JScrollPane(audioFiles), c);
		c.gridy++; c.weighty = 0;
		audioPanel.add(writeAudio, c);
		c.gridy++;
		audioPanel.add(addButton, c);
		
		c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.weightx = 1; c.weighty = 1;
		c.anchor = GridBagConstraints.NORTH;
		getContentPane().setLayout(new GridBagLayout());
		
		c.gridheight = GridBagConstraints.REMAINDER;
		c.insets = new Insets(10, 10, 10, 10);
		getContentPane().add(audioPanel, c);
		
		c.gridheight = 1;
		c.gridx++;
		getContentPane().add(visualPanel, c);
		
		c.gridy++;
		getContentPane().add(exportButton, c);
		
		formatComboBox.addItem("JPEG");
		formatComboBox.addItem("PNG");
		
		formatComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				updateSlider();
			}
		});
		
		exportButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Thread thread = new Thread() {
					@Override
					public void run() {
						export();
					}
				};
				thread.start();
			}
		});
		
		addButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addAudio();
			}
		});

		audioFiles.setCellRenderer(new DefaultListCellRenderer() {
			private static final long serialVersionUID = 1L;

			@Override
			public Component getListCellRendererComponent(JList list,
					Object value, int index, boolean isSelected,
					boolean cellHasFocus) {
				Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
				if(c instanceof JLabel && value instanceof File) {
					File file = (File)value;
					JLabel label = (JLabel)c;
					label.setText( file.getName() );
					label.setIcon( UIManager.getIcon("FileView.fileIcon") );
				}
				return c;
			}
			
		});
		
		setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
		jpegQuality.setToolTipText("Define the JPEG compression quality of the visual track.");
		fpsSpinner.setToolTipText("Define the number of frames per second.");
		framesSpinner.setToolTipText("Define the number of frames.");
	}
	
	private void updateSlider() {
		jpegQuality.setEnabled( formatComboBox.getSelectedIndex()==0 );
	}
	
	public void addAudio() {
		FileDialog fileDialog = new FileDialog(this);
		fileDialog.setFilenameFilter(new SuffixFilenameFilter("wav", "aif"));
		fileDialog.pack();
		fileDialog.setLocationRelativeTo(null);
		fileDialog.setVisible(true);
		if(fileDialog.getFile()==null)
			return;
		File file = new File( fileDialog.getDirectory() + fileDialog.getFile() );
		audioFileList.add(file);
	}
	
	public void export() {
		FileDialog fileDialog = new FileDialog(this);
		fileDialog.setMode(FileDialog.SAVE);
		fileDialog.pack();
		fileDialog.setLocationRelativeTo(null);
		fileDialog.setVisible(true);
		
		final JDialog progressDialog = new JDialog(this, "Progress");

		JProgressBar progressBar = new JProgressBar();
		JButton cancelButton = new JButton("Cancel");
		JLabel label = new JLabel("Writing...");
		label.setHorizontalAlignment(SwingConstants.LEFT);
		
		progressDialog.getContentPane().setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.weightx = 1; c.weighty = 1;
		c.insets = new Insets(12, 12, 12, 12); c.anchor = GridBagConstraints.WEST;
		progressDialog.getContentPane().add( label, c);
		c.gridy++; c.insets.top = 0;
		progressDialog.getContentPane().add( progressBar, c);
		c.gridy++;
		c.anchor = GridBagConstraints.SOUTHEAST;
		progressDialog.getContentPane().add( cancelButton, c);

		Dimension d = progressBar.getPreferredSize();
		d.width = 300;
		progressBar.setPreferredSize(d);
		
		progressDialog.pack();
		progressDialog.setLocationRelativeTo(null);
		
		cancelButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				progressDialog.getRootPane().putClientProperty("cancelled", Boolean.TRUE);
			}
		});

		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				progressDialog.setVisible(true);
			}
		});

		File file = new File( fileDialog.getDirectory() + fileDialog.getFile()+".mov" );
		
		long time = System.currentTimeMillis();
		MovWriter anim = null;
		int framesWritten = 0;
		
		BufferedImage bi = new BufferedImage(640,480,BufferedImage.TYPE_INT_RGB);
		Graphics2D g = bi.createGraphics();
		g.setColor(Color.white);
		g.fillRect(0,0,bi.getWidth(),bi.getHeight());
		g.dispose();
		
		int frameCount = ((Number)framesSpinner.getValue()).intValue();
		int fps = ((Number)fpsSpinner.getValue()).intValue();
		
		try {
			if(formatComboBox.getSelectedIndex()==0) {
				float quality = ((Number)jpegQuality.getValue()).floatValue();
				anim = new JPEGMovWriter(file, quality);
			} else if(formatComboBox.getSelectedIndex()==1) {
				anim = new PNGMovWriter(file);
			}
			for(int a = 0; a<audioFileList.size(); a++) {
				File audioFile = audioFileList.get(a);
				AudioInputStream audioIn = AudioSystem.getAudioInputStream(audioFile);
				anim.addAudioTrack(audioIn, 0);
			}
			float frameDuration = 1f/(fps);
			progressBar.setMaximum(frameCount);
			Random random = new Random(0);
			
			for(; framesWritten<frameCount; framesWritten++) {
				if( progressDialog.isVisible()==false || 
						Boolean.TRUE.equals(progressDialog.getRootPane().getClientProperty("cancelled"))) {
					throw new RuntimeException("cancelled");
				}
				progressBar.setValue(framesWritten);
				label.setText("Writing Frame "+(framesWritten+1)+"...");
				
				g = bi.createGraphics();
				g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
				Ellipse2D ellipse = new Ellipse2D.Float();
				g.setColor( new Color( random.nextInt(255), random.nextInt(255), random.nextInt(255) ) );
				ellipse.setFrame(random.nextInt(600), random.nextInt(440), 40, 40);
				g.fill( ellipse );
				g.dispose();
				
				anim.addFrame(frameDuration, bi, null);
			}
		} catch(IOException e) {
			e.printStackTrace();
		} catch(UnsupportedAudioFileException e) {
			e.printStackTrace();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(anim!=null) {
				try {
					anim.close( framesWritten==frameCount && writeAudio.isSelected() );
				} catch(IOException e) {
					e.printStackTrace();
				}
			}
			progressDialog.setVisible(false);
		}
		time = System.currentTimeMillis()-time;
		System.out.println("wrote "+framesWritten+" frames: "+file.getAbsolutePath()+" ("+(time)/1000.0+" s)");
	}
}
