/*
 * @(#)ScreenCaptureDemo.java
 *
 * $Date: 2015-02-28 21:59:45 +0100 (Sa, 28 Feb 2015) $
 *
 * Copyright (c) 2014 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.capture;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.ProgressMonitor;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.bric.animation.AnimationReader;
import com.bric.blog.Blurb;
import com.bric.blog.ResourceSample;
import com.bric.qt.io.JPEGMovWriter;

/** A demo application for the {@link ScreenCapture} class.
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/ScreenCaptureDemo/sample.png" alt="new&#160;com.bric.capture.ScreenCaptureDemo()">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@Blurb (
filename = "ScreenCapture",
title = "Screen Capture: Recording Java Apps",
releaseDate = "June 2008",
summary = "The <a href=\"http://java.sun.com/javase/6/docs/api/java/awt/Robot.html\">Robot</a> class can capture parts of your screen as an image, "+
"but it can be slow to process so many pixels.  This article ties into the <code>RepaintManager</code> to only capture the areas of interest.\n"+
"<p>Also this jar can export this animation as a MOV file (using JPEG moving encoding).  All 100% Java.",
link = "http://javagraphics.blogspot.com/2008/11/screen-capture-recording-java-apps.html",
sandboxDemo = false
)
@ResourceSample( sample="new com.bric.capture.ScreenCaptureDemo()" )
public class ScreenCaptureDemo extends JFrame {
	private static final long serialVersionUID = 1L;

	/** A demo program that creates a simple window with several
	 * GUI widgets, and then lets the user record their activity.
     * @param args the application's arguments. (This is unused.)
	 */
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				try {
					String lf = UIManager.getSystemLookAndFeelClassName();
					UIManager.setLookAndFeel(lf);
				} catch (Throwable e) {
					e.printStackTrace();
				}
				
				
				ScreenCaptureDemo f = new ScreenCaptureDemo();
				f.pack();
				f.setVisible(true);
				f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			}
		});
	}

	JToggleButton recordButton = new JToggleButton("Record");
	JComboBox<String> comboBox = new JComboBox<String>();
	JProgressBar progressBar1 = new JProgressBar();
	JProgressBar progressBar2 = new JProgressBar();
	JSpinner spinner = new JSpinner(new SpinnerNumberModel(0,0,100,5));
	
	public ScreenCaptureDemo() {
		super("ScreenCapture Demo");
		getContentPane().setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0;
		c.insets = new Insets(5,5,5,5);
		c.gridwidth = GridBagConstraints.REMAINDER;
		getContentPane().add(recordButton,c);
		c.gridy++; c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		getContentPane().add(new JSeparator(),c);
		c.gridy++; c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		progressBar1.setIndeterminate(true);
		getContentPane().add(progressBar1,c);
		
		c.gridy++;
		getContentPane().add(progressBar2,c);
		c.gridy++;
		getContentPane().add(spinner,c);
		ChangeListener changeListener = new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				int value = ((Number)spinner.getValue()).intValue();
				progressBar2.setValue(value);
			}
		};
		spinner.addChangeListener(changeListener);
		
		comboBox.addItem("Item 1");
		comboBox.addItem("Item 2");
		comboBox.addItem("Item 3");
		comboBox.setToolTipText("my tip!");
		
		c.gridy++;
		getContentPane().add(comboBox,c);
		c.gridy++;
		getContentPane().add(new JToggleButton("Toggle Me"),c);
		c.gridy++;
		getContentPane().add(new JSlider(),c);
		
		c.gridy = 2; c.gridx = 1; c.weightx = 1; c.weighty = 1;
		c.fill = GridBagConstraints.BOTH; c.gridheight = GridBagConstraints.REMAINDER;
		
		JTextPane textPane = new JTextPane();
		textPane.setText("This window contains random GUI widgets.  Press the \"Record\" button to begin capturing video, and then interact with the widgets.  Press \"Stop\" when finished.  Be careful!  This program records mouse movements, so a LOT of frames are created.  Don't record too long!  The encoding process is pretty slow.");
		JScrollPane scrollPane = new JScrollPane(textPane);
		scrollPane.setPreferredSize(new Dimension(220,100));
		getContentPane().add(scrollPane,c);
		
		recordButton.addActionListener(new ActionListener() {
			ScreenCapture capture;
			public void actionPerformed(ActionEvent e) {
				if(capture==null) {
					try {
						capture = new RobotScreenCapture(getBounds());
						capture.start();
						recordButton.setText("Stop");
					} catch(Exception e2) {
						e2.printStackTrace();
						recordButton.setSelected(false);
					}
				} else {
					AnimationReader r = capture.stop(false);
					write(r,new File("Screen Capture Demo.mov"));
					recordButton.setText("Record");
					capture = null;
				}
			}
			protected void write(final AnimationReader r,final File movFile) {
				final ProgressMonitor monitor = new ProgressMonitor(ScreenCaptureDemo.this,"Writing Movie","",0,1);
				monitor.setMillisToPopup(5);
				Thread thread = new Thread() {
					@Override
					public void run() {
						try {
							write(r,movFile,monitor);
						} catch(IOException e) {
							e.printStackTrace();
						}
					}
				};
				thread.start();
			}
			protected void write(AnimationReader r,File movFile,ProgressMonitor monitor) throws IOException {
				JPEGMovWriter anim = new JPEGMovWriter(movFile);
				try {
					anim.addFrames(r, monitor);
				} finally {
					anim.close(true);
				}
			}
		});
	}
}
