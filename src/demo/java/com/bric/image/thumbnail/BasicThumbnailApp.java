/*
 * @(#)BasicThumbnailApp.java
 *
 * $Date: 2015-02-28 21:59:45 +0100 (Sa, 28 Feb 2015) $
 *
 * Copyright (c) 2012 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.image.thumbnail;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import com.bric.blog.Blurb;
import com.bric.blog.ResourceSample;
import com.bric.image.ImageLoader;
import com.bric.image.thumbnail.BasicThumbnail.Border;
import com.bric.image.thumbnail.BasicThumbnail.Image;
import com.bric.image.thumbnail.BasicThumbnail.Layer;
import com.bric.image.thumbnail.BasicThumbnail.Shadow;
import com.bric.io.IOUtils;
import com.bric.io.SuffixFilenameFilter;
import com.bric.plaf.AquaAngleSliderUI;
import com.bric.plaf.ButtonCluster;
import com.bric.plaf.GradientButtonUI;
import com.bric.plaf.GradientPanelUI;
import com.bric.swing.BricApplet;
import com.bric.swing.DashedBorder;
import com.bric.swing.InspectorLayout;
import com.bric.swing.InspectorLayout.HorizontalAlignment;
import com.bric.swing.JFancyBox;
import com.bric.swing.MagnificationPanel;
import com.bric.swing.PaddedIcon;
import com.bric.swing.PartialLineBorder;
import com.bric.swing.resources.MinusIcon;
import com.bric.swing.resources.PlusIcon;
import com.bric.swing.resources.TriangleIcon;
import com.bric.util.ObservableList;

/** A simple demo applet for the {@link BasicThumbnail} class.
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/BasicThumbnailApp/sample.png" alt="new&#160;com.bric.image.thumbnail.BasicThumbnailApp(true)">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@Blurb (
filename = "BasicThumbnail",
title = "Thumbnails: Formatting Thumbnails",
releaseDate = "August 2012",
summary = "This presents a simple model to decorate thumbnails.\n"+
"<p>Each thumbnail is rendered as a series of consecutive layers, including shadows "+
" and borders. The thumbnail is created by passing a source image (as a File, URL, or Image) "+
"and a maximum dimension size for the formatted thumbnail.",
instructions = "This applet demonstrates the inner composition of a <code>BasicThumbnail</code>.\n"+
"<p>Click a thumbnail to select that layer. An inspector of controls will appear to modify that layer.\n"+
"<p>The \"Layers\" row of controls lets you reorder/delete the selected layer, or insert new layers.",
link = "http://javagraphics.blogspot.com/2012/08/thumbnails-formatting-thumbnails.html",
sandboxDemo = true
)
@ResourceSample( sample="new com.bric.image.thumbnail.BasicThumbnailApp(true)" )
public class BasicThumbnailApp extends BricApplet {
	private static final long serialVersionUID = 1L;
	
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				try {
					String lf = UIManager.getSystemLookAndFeelClassName();
					UIManager.setLookAndFeel(lf);
				} catch (Throwable e) {
					e.printStackTrace();
				}
				
				JFrame f = new JFrame();
				f.getContentPane().add(new BasicThumbnailApp(true));
				f.pack();
				f.setVisible(true);
				f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			}
		});
	}
	
	static final BufferedImage DEFAULT_IMAGE = ImageLoader.createImage( BasicThumbnailApp.class.getResource("resources/sample.jpg" ) );

	ObservableList<BasicThumbnail.Layer> layers = new ObservableList<BasicThumbnail.Layer>();
	BufferedImage imageSource = DEFAULT_IMAGE;
	JList layerList = new JList(layers.getListModelView(true));
	JScrollPane layerScrollPane = new JScrollPane(layerList, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
	InspectorLayout inspectorLayout = new InspectorLayout();
	JButton addButton = new JButton(new PlusIcon(12, 12));
	JButton upButton = new JButton(new TriangleIcon(SwingConstants.EAST, 12/2, 12));
	JButton codeButton = new JButton("<>");
	JButton downButton = new JButton(new TriangleIcon(SwingConstants.WEST, 12/2, 12));
	JButton removeButton = new JButton(new PaddedIcon( new MinusIcon(12, 12), 2));
	JPanel source = new JPanel(new GridBagLayout());
	JPanel layerListHeader = new JPanel(new GridBagLayout());
	JPanel inspectorHeader = new JPanel(new GridBagLayout());
	JButton browseSourceButton = new JButton("Browse...");
	JSpinner sizeSpinner = new JSpinner(new SpinnerNumberModel(64, 32, 300, 1));
	JLabel sourceLabel = new JLabel("(Default)");
	JButton saveButton = new JButton("Save...");
	
	class BorderOptions {
		JLabel colorLabel = new JLabel("Color:");
		JLabel thicknessLabel = new JLabel("Thickness:");
		JLabel innerCurveLabel = new JLabel("Inner Curvature:");
		JLabel outerCurveLabel = new JLabel("Outer Curvature:");
		JSpinner thicknessSpinner = new JSpinner(new SpinnerNumberModel(1,1,10,1));
		JSpinner innerCurveSpinner = new JSpinner(new SpinnerNumberModel(1,0,100,1));
		JSpinner outerCurveSpinner = new JSpinner(new SpinnerNumberModel(1,0,100,1));
		GrayscaleSlider graySlider = new GrayscaleSlider();
		int adjusting = 0;
		
		BorderOptions() {
			ChangeListener changeListener = new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					if(adjusting>0) return;
					commit();
				}
			};
			thicknessSpinner.addChangeListener(changeListener);
			innerCurveSpinner.addChangeListener(changeListener);
			outerCurveSpinner.addChangeListener(changeListener);
			graySlider.addChangeListener(changeListener);
		}
		
		void populate(Border border) {
			inspectorHeaderLabel.setText("Border Inspector:");
			adjusting++;
			try {
				thicknessSpinner.setValue( border.thickness );
				innerCurveSpinner.setValue( border.innerCurvature );
				outerCurveSpinner.setValue( border.outerCurvature );
				graySlider.setColor( border.color );
			} finally {
				adjusting--;
			}
			
			inspectorLayout.clear();
			inspectorLayout.addRow(colorLabel, graySlider, true, null);
			inspectorLayout.addRow(thicknessLabel, thicknessSpinner, false, null);
			inspectorLayout.addRow(innerCurveLabel, innerCurveSpinner, false, null);
			inspectorLayout.addRow(outerCurveLabel, outerCurveSpinner, false, null);
			inspectorLayout.addGap();
		}
		
		void commit() {
			Border border = new Border(
					((Integer)thicknessSpinner.getValue()).intValue(),
					graySlider.getColor(),
					((Integer)innerCurveSpinner.getValue()).intValue(),
					((Integer)outerCurveSpinner.getValue()).intValue()
			);
			int index = layerList.getSelectedIndex();
			layers.set(index, border);
			refresh();
		}
	}

	class ShadowOptions {
		JLabel opacityLabel = new JLabel("Opacity:");
		JLabel thicknessLabel = new JLabel("Thickness:");
		JLabel innerCurveLabel = new JLabel("Inner Curvature:");
		JLabel outerCurveLabel = new JLabel("Outer Curvature:");
		JSpinner thicknessSpinner = new JSpinner(new SpinnerNumberModel(1,1,10,1));
		JSpinner opacitySpinner = new JSpinner(new SpinnerNumberModel(1,0,255,1));
		JSpinner innerCurveSpinner = new JSpinner(new SpinnerNumberModel(1,0,100,1));
		JSpinner outerCurveSpinner = new JSpinner(new SpinnerNumberModel(1,0,100,1));
		int adjusting = 0;
		
		ShadowOptions() {
			ChangeListener changeListener = new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					if(adjusting>0) return;
					commit();
				}
			};
			thicknessSpinner.addChangeListener(changeListener);
			opacitySpinner.addChangeListener(changeListener);
			innerCurveSpinner.addChangeListener(changeListener);
			outerCurveSpinner.addChangeListener(changeListener);
		}
		
		void populate(Shadow shadow) {
			inspectorHeaderLabel.setText("Shadow Inspector:");
			adjusting++;
			try {
				thicknessSpinner.setValue( shadow.ringOpacities.length );
				if(shadow.ringOpacities.length==0) {
					opacitySpinner.setValue( 0 );
					opacitySpinner.setEnabled(false);
				} else {
					opacitySpinner.setValue( shadow.ringOpacities[0] );
					opacitySpinner.setEnabled(true);
				}
				innerCurveSpinner.setValue( shadow.innerCurvature );
				outerCurveSpinner.setValue( shadow.outerCurvature );
			} finally {
				adjusting--;
			}
			
			inspectorLayout.clear();
			inspectorLayout.addRow(opacityLabel, opacitySpinner, false, null);
			inspectorLayout.addRow(thicknessLabel, thicknessSpinner, false, null);
			inspectorLayout.addRow(innerCurveLabel, innerCurveSpinner, false, null);
			inspectorLayout.addRow(outerCurveLabel, outerCurveSpinner, false, null);
			inspectorLayout.addGap();
		}
		
		void commit() {
			int[] opacities = new int[ ((Integer)thicknessSpinner.getValue()).intValue() ];
			for(int a = 0; a<opacities.length; a++) {
				opacities[a] = ((Integer)opacitySpinner.getValue()).intValue();
			}
			Shadow shadow = new Shadow( opacities, 
					((Number)innerCurveSpinner.getValue()).intValue(), 
					((Number)outerCurveSpinner.getValue()).intValue() );
			int index = layerList.getSelectedIndex();
			layers.set(index, shadow);
			refresh();
		}
	}

	class ImageOptions {
		JLabel angleLabel = new JLabel("Angle:");
		JSlider angleSlider = new JSlider(0, 100, 0);
		float theta = 0;

		JCheckBox colorCheckBox = new JCheckBox("Color:");
		GrayscaleSlider graySlider = new GrayscaleSlider();
		JLabel curveLabel = new JLabel("Curvature:");
		JSpinner curveSpinner = new JSpinner(new SpinnerNumberModel(1,0,100,1));
		
		int adjusting = 0;
		
		ImageOptions() {
			angleSlider.setUI( new AquaAngleSliderUI() );
			
			ChangeListener changeListener = new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					if(adjusting>0) return;
					commit();
				}
			};
			
			colorCheckBox.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					commit();
				}
			});
			
			curveSpinner.addChangeListener(changeListener);
			graySlider.addChangeListener(changeListener);
			angleSlider.addChangeListener(changeListener);
		}
		
		void populate(Image image) {
			inspectorHeaderLabel.setText("Image Inspector:");
			adjusting++;
			try {
				colorCheckBox.setSelected( image.color!=null );
				if(image.color!=null) {
					graySlider.setColor( image.color );
				}
				curveSpinner.setValue( image.curvature );
			} finally {
				adjusting--;
			}
			
			inspectorLayout.clear();
			inspectorLayout.addRow(colorCheckBox, graySlider, true, null);
			inspectorLayout.addRow(curveLabel, curveSpinner, false, null);
			inspectorLayout.addRow(angleLabel, angleSlider, false, null);
			inspectorLayout.addGap();
		}
		
		Image createImage() {
			int c = ((Number)curveSpinner.getValue()).intValue();
			Color color = colorCheckBox.isSelected() ? graySlider.getColor() : null;
			return new Image( color, c );
		}
		
		void commit() {
			float range = angleSlider.getMaximum() - angleSlider.getMinimum();
			float i = ((float)(angleSlider.getValue()-angleSlider.getMinimum()))/range;
			theta = (float)(i*Math.PI*2);

			Image image = createImage();
			int index = layerList.getSelectedIndex();
			layers.set(index, image);
			refresh();
		}
	}

	class NoOptions {
		JLabel label = new JLabel("Click a layer thumbnail above.");
		
		void populate() {
			inspectorHeaderLabel.setText("Inspector:");
			inspectorLayout.clear();
			inspectorLayout.addRow(label, HorizontalAlignment.LEFT, new Insets(4, 4, 4, 4), 0);
			inspectorLayout.addGap();
		}
	}
	
	BorderOptions borderOptions = new BorderOptions();
	ShadowOptions shadowOptions = new ShadowOptions();
	ImageOptions imageOptions = new ImageOptions();
	NoOptions noOptions = new NoOptions();
	MagnificationPanel zoom = new MagnificationPanel(layerList, 20, 20, 16);
	JLabel inspectorHeaderLabel = new JLabel();
	JPopupMenu addPopup = new JPopupMenu();
	JMenuItem addShadow = new JMenuItem("Add Shadow");
	JMenuItem addBorder = new JMenuItem("Add Border");
	JTextArea codeTextArea = new JTextArea();
	JFancyBox codeBox;
	
	ActionListener actionListener = new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			if(e.getSource()==removeButton) {
				layers.remove( layerList.getSelectedIndex() );
			} if(e.getSource()==upButton) {
				final int index = layerList.getSelectedIndex();
				Layer element = layers.get( index );
				layers.remove(element);
				layers.add( index + 1, element);
				SwingUtilities.invokeLater(new Runnable() {
					public void run() {
						layerList.setSelectedIndex( index + 1);
					}
				});
			} if(e.getSource()==downButton) {
				final int index = layerList.getSelectedIndex();
				Layer element = layers.get( index );
				layers.remove(element);
				layers.add( index - 1, element);
				SwingUtilities.invokeLater(new Runnable() {
					public void run() {
						layerList.setSelectedIndex( index - 1);
					}
				});
			} else if(e.getSource()==addButton) {
				addPopup.show(addButton, 0, addButton.getHeight());
			} else if(e.getSource()==addShadow) {
				final int index = layerList.getSelectedIndex();
				layers.add(index + 1, createDefaultShadow());
				SwingUtilities.invokeLater(new Runnable() {
					public void run() {
						layerList.setSelectedIndex( index + 1);
					}
				});
			} else if(e.getSource()==addBorder) {
				final int index = layerList.getSelectedIndex();
				layers.add(index + 1, new Border( 1, Color.gray, 5, 5));
				SwingUtilities.invokeLater(new Runnable() {
					public void run() {
						layerList.setSelectedIndex( index + 1);
					}
				});
			} else if(e.getSource()==codeButton) {
				StringBuffer sb = new StringBuffer();
				sb.append( "BasicThumbnail thumbnail = new BasicThumbnail(\n");
				sb.append( "\tnew BasicThumbnail.Element[] {\n");
				for(int a = 0; a<layers.size(); a++) {
					if(a<layers.size()-1) {
						sb.append("\t\t"+layers.get(a).getConstructionString()+",\n");
					} else {
						sb.append("\t\t"+layers.get(a).getConstructionString()+"\n");
					}
				}
				sb.append( "\t}, "+imageOptions.theta+"f );");
				codeTextArea.setTabSize(2);
				codeTextArea.setText(sb.toString());
				codeBox.setVisible(true);
			}
		}
	};

	public BasicThumbnailApp() {
		this(false);
	}
	
	/**
	 * 
	 * @param includeImportExport whether to include options to read
	 * and save images. This should generally be false for unsigned
	 * applets.
	 */
	public BasicThumbnailApp(boolean includeImportExport) {
		getContentPane().setLayout(new GridBagLayout());
		
		codeBox = new JFancyBox( this, codeTextArea );
		
		inspectorLayout.setColumnInsets(new Insets(4,6,4,2));
		inspectorLayout.getRowLayout().setAnimationEnabled(false);
		inspectorLayout.getRowLayout().setDefaultAutoAlign(false);
		
		layerList.setLayoutOrientation( JList.HORIZONTAL_WRAP );
		layerList.setVisibleRowCount(1);
		 //the viewport is opaque, but this will affect the zoom panel:
		layerList.setOpaque(false);
		
		zoom.setInstruction("Mouse over thumbnails to zoom in.");
		
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.weightx = 0; c.weighty = 0;
		c.fill = GridBagConstraints.BOTH;
		getContentPane().add( source, c);
		c.gridy++; c.weighty = 0;
		getContentPane().add( layerListHeader, c);
		c.gridy++; c.weighty = 0;
		getContentPane().add( layerScrollPane, c);
		c.gridy++; c.weighty = 0;
		getContentPane().add( inspectorHeader, c);
		c.gridy++; c.weighty = 1;
		getContentPane().add( inspectorLayout.getPanel(), c );
		
		c.gridx = 1; c.gridy = 0; c.gridheight = GridBagConstraints.REMAINDER;
		c.weightx = 1; c.weighty = 1;
		getContentPane().add(zoom, c);
		
		c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.weightx = 1; c.weighty = 0;
		c.anchor = GridBagConstraints.WEST;
		c.insets = new Insets(3,6,3,3);
		layerListHeader.add( new JLabel("Layers:"), c);
		c.gridx++; c.weightx = 0;
		c.insets = new Insets(0,0,0,0);
		c.fill = GridBagConstraints.BOTH;
		layerListHeader.add( codeButton, c);
		c.gridx++;
		layerListHeader.add( addButton, c);
		c.gridx++;
		layerListHeader.add( downButton, c);
		c.gridx++;
		layerListHeader.add( removeButton, c);
		c.gridx++;
		layerListHeader.add( upButton, c);
		c.gridx++;
		layerListHeader.setUI(new GradientPanelUI( Color.white, new Color(220, 220, 220)) );
		inspectorHeader.setUI(new GradientPanelUI( Color.white, new Color(220, 220, 220)) );
		source.setUI(new GradientPanelUI( Color.white, new Color(220, 220, 220)) );
		

		c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.weightx = 0; c.weighty = 0;
		c.anchor = GridBagConstraints.WEST;
		c.insets = new Insets(3,6,3,3);
		source.add( new JLabel("Image:"), c);
		c.gridx++; c.weightx = 1;
		c.insets = new Insets(3, 6, 3, 6);
		c.fill = GridBagConstraints.HORIZONTAL;
		c.anchor = GridBagConstraints.WEST;
		source.add( sourceLabel, c);
		c.gridx++; c.weightx = 0;
		c.anchor = GridBagConstraints.EAST;
		source.add( sizeSpinner, c);
		c.gridx++;
		source.add( browseSourceButton, c);
		
		if(!includeImportExport) { //an applet:
			source.setVisible(false);
			saveButton.setVisible(false);
			layerListHeader.setBorder(new PartialLineBorder(Color.gray, new Insets(1,1,1,1)));
			inspectorHeader.setBorder(new PartialLineBorder(Color.gray, new Insets(0,1,1,1)));
			inspectorLayout.getPanel().setBorder(new PartialLineBorder(Color.gray, new Insets(0,1,1,1)));
			layerScrollPane.setBorder(new PartialLineBorder(Color.gray, new Insets(0,1,1,1)));
			zoom.setBorder(new PartialLineBorder(Color.gray, new Insets(1, 0, 1, 1)));
		} else { //an application:
			source.setBorder(new PartialLineBorder(Color.gray, new Insets(0,0,1,1)));
			layerListHeader.setBorder(new PartialLineBorder(Color.gray, new Insets(0,0,1,1)));
			inspectorHeader.setBorder(new PartialLineBorder(Color.gray, new Insets(0,0,1,1)));
			inspectorLayout.getPanel().setBorder(new PartialLineBorder(Color.gray, new Insets(0,0,0,1)));
			layerScrollPane.setBorder(new PartialLineBorder(Color.gray, new Insets(0,0,1,1)));
		}
		
		c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.weightx = 1; c.weighty = 0;
		c.anchor = GridBagConstraints.WEST;
		c.insets = new Insets(3,6,3,3);
		inspectorHeader.add( inspectorHeaderLabel, c);
		
		GradientButtonUI buttonUI = new GradientButtonUI();
		ButtonCluster.install(new AbstractButton[] { downButton, removeButton, upButton }, buttonUI, true);
		
		codeButton.setUI( buttonUI );
		addButton.setUI( buttonUI );
		
		layerList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		ListCellRenderer mainRenderer = new ListCellRenderer() {
			JLabel label = new JLabel();

			public Component getListCellRendererComponent(JList list,
					Object element, int row, boolean isSelected, boolean hasFocus) {
				Layer e = (Layer)element;
				if(e instanceof Border) {
					label.setText("Border");
				} else if(e instanceof Shadow) {
					label.setText("Shadow");
				} else if(e instanceof Image) {
					label.setText("Image");
				}
				
				label.setIcon( new ImageIcon(createIcon(e)) );
				if(isSelected) {
					label.setBorder(new DashedBorder(8, 2, 6));
				} else {
					label.setBorder(new EmptyBorder(8, 8, 8, 8));
				} 
				label.setOpaque(false);
				label.setVerticalTextPosition(SwingConstants.BOTTOM);
				label.setHorizontalTextPosition(SwingConstants.CENTER);
				label.setForeground( SystemColor.textText );
				label.setBackground( Color.white );
				return label;
			}
		};
		layerList.setCellRenderer(mainRenderer);
		layerList.setBorder( new EmptyBorder(5, 5, 5, 5) );
		
		layerList.addListSelectionListener(new ListSelectionListener() {

			public void valueChanged(ListSelectionEvent e) {
				selectionChanged();
			}
			
		});
		
		layerScrollPane.setMinimumSize( new Dimension(300, 150) );
		
		layers.addAll( BasicThumbnail.Aqua.getLayers() );
		
		codeButton.setToolTipText("Display code to generate this thumbnail.");
		addButton.setToolTipText("Add a layer to this thumbnail.");
		removeButton.setToolTipText("Delete the selected layer from this thumbnail.");
		upButton.setToolTipText("Move the selected layer to the right.");
		downButton.setToolTipText("Move the selected layer to the left.");
		browseSourceButton.setToolTipText("Select a new source image.");
		saveButton.setToolTipText("Save this image as a png.");
		sizeSpinner.setToolTipText("Adjust the size of the thumbnail image.");

		codeButton.setForeground(Color.darkGray);
		
		codeButton.addActionListener(actionListener);
		addButton.addActionListener(actionListener);
		upButton.addActionListener(actionListener);
		downButton.addActionListener(actionListener);		
		removeButton.addActionListener(actionListener);	
		addBorder.addActionListener(actionListener);
		addShadow.addActionListener(actionListener);
		
		addPopup.add(addBorder);
		addPopup.add(addShadow);
		
		sizeSpinner.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				//I'm not sure how else to refresh the list correctly:
				layerList.setFixedCellWidth(100);
				layerList.setFixedCellWidth(-1);
				
				int i = ((Number)sizeSpinner.getValue()).intValue();
				layerScrollPane.setMinimumSize( new Dimension(300, Math.max(150, i+40)) );
				layerScrollPane.invalidate();
				getRootPane().repaint();
				getRootPane().revalidate();
				getRootPane().validate();
			}
		});
		
		browseSourceButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					File file = getFile(new String[] { "png", "jpg"}, FileDialog.LOAD );
					if(file==null) throw new NullPointerException();
					imageSource = ImageIO.read(file);
					sourceLabel.setText(file.getName());
				} catch(Exception e2) {
					e2.printStackTrace();
				} finally {
					repaint();
				}
			}
		});
		
		saveButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					File file = getFile(new String[] { "png" }, FileDialog.SAVE );
					if(file==null) throw new NullPointerException();
					
					int index = layerList.getSelectedIndex();
					if(index==-1) throw new NullPointerException("select a layer to export");
					BufferedImage bi = createIcon( layers.get(index) );
					if(!file.getName().toLowerCase().endsWith(".png")) {
						boolean existed = file.exists();
						file = new File(file.getParentFile(), file.getName()+".png");
						if( (!existed) && file.exists() ) {
							file = IOUtils.getUniqueFile(file.getParentFile(), file.getName(), true, false);
						}
					}
					
					ImageIO.write(bi, "png", file);
				} catch(Exception e2) {
					e2.printStackTrace();
				} finally {
					repaint();
				}
			}
		});
		
		selectionChanged();
	}
	
	private BufferedImage createIcon(Layer e) {
		int index = layers.indexOf(e);
		Layer[] elements = new Layer[index+1];
		for(int a = 0; a<elements.length; a++) {
			elements[a] = layers.get(a);
		}
		
		BasicThumbnail thumbnail = new BasicThumbnail( elements, imageOptions.theta, false );
		int size = ((Number)sizeSpinner.getValue()).intValue();
		BufferedImage bi = thumbnail.create(imageSource, new Dimension(size, size));
		return bi;
	}
	
	private File getFile(String[] extensions,int dialogMode) {
		Window w = SwingUtilities.getWindowAncestor(BasicThumbnailApp.this);
		if(!(w instanceof Frame)) {
			throw new IllegalStateException();
		}
		FileDialog fd = new FileDialog((Frame)w);
		fd.setFilenameFilter(new SuffixFilenameFilter(extensions));
		fd.setMode(dialogMode);
		fd.pack();
		fd.setLocationRelativeTo(null);
		fd.setVisible(true);
		String s = fd.getFile();
		if(s==null) return null;
		File file = new File(fd.getDirectory()+s);
		return file;
	}
	
	private Shadow createDefaultShadow() {
		return new BasicThumbnail.Shadow(new int[] {6, 6, 6}, 2, 12);
	}
	
	private void selectionChanged() {
		Layer element = (Layer)layerList.getSelectedValue();
		if(element instanceof Border) {
			borderOptions.populate( (Border)element );
		} else if(element instanceof Shadow) {
			shadowOptions.populate( (Shadow)element );
		} else if(element instanceof Image) {
			imageOptions.populate( (Image)element );
		} else if(element==null) {
			noOptions.populate();
		}
		upButton.setEnabled(element!=null && layerList.getSelectedIndex()<layerList.getModel().getSize()-1);
		removeButton.setEnabled(element!=null && (!(element instanceof Image)));
		downButton.setEnabled(element!=null && layerList.getSelectedIndex()>0);
		
		int index = layerList.getSelectedIndex();
		if(index!=-1)
			inspectorLayout.addRow(saveButton, HorizontalAlignment.CENTER, new Insets(6,6,6,6), 0);
		refresh();
	}
	
	protected void refresh() {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				layerList.repaint();
				zoom.refresh();
			}
		});
	}
	
}
