/*
 * @(#)GrayscaleSlider.java
 *
 * $Date: 2014-11-05 05:30:37 +0100 (Mi, 05 Nov 2014) $
 *
 * Copyright (c) 2012 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.image.thumbnail;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.geom.GeneralPath;
import java.awt.geom.RoundRectangle2D;

import javax.swing.JComponent;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.basic.BasicSliderUI;

import com.bric.blog.ResourceSample;
import com.bric.plaf.PlafPaintUtils;

/** A simple slider that ranges from black to white.
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/GrayscaleSlider/sample.png" alt="new&#160;com.bric.image.thumbnail.GrayscaleSlider()">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@ResourceSample( sample="new com.bric.image.thumbnail.GrayscaleSlider()" )
public class GrayscaleSlider extends JSlider {
	private static final long serialVersionUID = 1L;
	
	/** This is a minimal SliderUI to show a horizontal grayscale gradient.
	 * This is sloppy work, but it gets the job done for its limited scope. If
	 * this is ever applied to a bigger project it might be useful to revisit
	 * how it calculates/repaints the track and thumb.
	 */
	static class GrayscaleSliderUI extends BasicSliderUI {

		public GrayscaleSliderUI(JSlider slider) {
			super(slider);
		}
		
		@Override
		protected void calculateTrackRect() {
			super.calculateTrackRect();
			this.trackRect.y = 5;
			this.trackRect.height = 10;
		}

		@Override
		public Dimension getMinimumSize(JComponent c) {
			Dimension d = getPreferredSize(c);
			d.width = 10;
			return d;
		}

		@Override
		public Dimension getPreferredSize(JComponent c) {
			Dimension returnValue = super.getPreferredSize(c);
			returnValue.height = 20;
			return returnValue;
		}

		@Override
		public void paintThumb(Graphics g0) {
			Graphics2D g = (Graphics2D)g0;
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
			
			GeneralPath triangle = new GeneralPath();
			double x = thumbRect.getCenterX();
			double y1 = 14;

			int k = 5;
			double x1 = x + k;
			double x2 = x - k;
			
			triangle.moveTo( x, y1 );
			triangle.lineTo( x1, y1+k );
			triangle.lineTo( x2, y1+k );
			triangle.lineTo( x, y1 );
			triangle.closePath();
			
			g.setColor(Color.white);
			g.setStroke(new BasicStroke(2.5f));
			g.draw(triangle);
			g.setColor(Color.black);
			g.fill(triangle);
		}

		@Override
		public void paintTrack(Graphics g0) {
			RoundRectangle2D roundRect = new RoundRectangle2D.Float(trackRect.x, trackRect.y, trackRect.width, trackRect.height, trackRect.height, trackRect.height);

			Graphics2D g = (Graphics2D)g0;
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			PlafPaintUtils.paintFocus(g, roundRect, 2);
			
			g.setPaint( new GradientPaint(trackRect.x, 0, Color.black, trackRect.x+trackRect.width, 0, Color.white) );
			g.fill( roundRect );
		}

		@Override
		public void paintFocus(Graphics g0) {
			//do nothing, we paint the focus under the track in paintTrack(g)
			//(this method would paint the focus ABOVE the track if we let it...)
		}
		
		private ChangeListener repaintChangeListener = new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				slider.repaint();
			}
		};
		
		private FocusListener repaintFocusListener = new FocusListener() {

			public void focusGained(FocusEvent e) {
				slider.repaint();
			}

			public void focusLost(FocusEvent e) {
				slider.repaint();
			}
		};

		@Override
		public void installUI(JComponent c) {
			super.installUI(c);
			((JSlider)c).addChangeListener(repaintChangeListener);
			((JSlider)c).addFocusListener(repaintFocusListener);
		}

		@Override
		public void uninstallUI(JComponent c) {
			super.uninstallUI(c);
			((JSlider)c).removeChangeListener(repaintChangeListener);
			((JSlider)c).removeFocusListener(repaintFocusListener);
		}
	}

	public GrayscaleSlider() {
		super(0, 255);
		setUI(new GrayscaleSliderUI(this));
	}

	public GrayscaleSlider(Color c) {
		this();
		setColor(c);
	}
	
	public Color getColor() {
		int g = getValue();
		return new Color(g, g, g);
	}
	
	public void setColor(Color c) {
		int g = (c.getRed()+c.getGreen()+c.getBlue())/3;
		setValue(g);
	}
}
