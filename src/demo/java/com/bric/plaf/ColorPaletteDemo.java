/*
 * @(#)ColorPaletteDemo.java
 *
 * $Date: 2015-02-28 21:59:45 +0100 (Sa, 28 Feb 2015) $
 *
 * Copyright (c) 2011 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.plaf;

import java.awt.Color;
import java.awt.geom.Point2D;

import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.plaf.ComponentUI;

import com.bric.awt.ModifierTracker;
import com.bric.blog.Blurb;
import com.bric.blog.ResourceSample;
import com.bric.swing.ColorPalette;

/** A demo app of several {@link ColorPalette} UIs.
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/ColorPaletteDemo/sample.png" alt="new&#160;com.bric.plaf.ColorPaletteDemo()">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@Blurb (
filename = "ColorPalette",
title = "Colors: a ColorPalette",
releaseDate = "January 2010",
summary = "This is an isolated GUI component from <a href=\"http://javagraphics.blogspot.com/2010/01/colors-good-gui-for-selecting-colors.html\">this article</a>.\n"+
"<p>This app shows the progression of several different concepts for ColorPalettes.  (Hopefully each one is an improvement over the previous...)",
instructions = "This applet demonstrates several different color palettes. They are generally "+
"listed in the order I revised each one in, with the first draft first and the last (favorite) "+
"draft last.",
sandboxDemo = true
)
@ResourceSample( sample="new com.bric.plaf.ColorPaletteDemo()" )
public class ColorPaletteDemo extends UIDemo {
	private static final long serialVersionUID = 1L;
	
	public static void main(String[] args) {
		try {
			String lf = UIManager.getSystemLookAndFeelClassName();
			UIManager.setLookAndFeel(lf);
		} catch (Throwable e) {
			e.printStackTrace();
		}
		
		
		JFrame f = new JFrame("ColorPalette Demo");
		f.getContentPane().add(new ColorPaletteDemo());
		f.pack();
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	static UIHandler handler = new ColorPaletteUIHandler();

	static HueDistribution hues = new HueDistribution(new float[] {0, //red
			1f/12f, //orange
			1f/6f, //yellow
			1f/3f, //green
			1f/2f, //cyan
			2f/3f, //blue
			5f/6f, //purple
			1 //full circle
			});
	
	public ColorPaletteDemo() {
		super(new ComponentUI[] {
				new SimpleColorPaletteUI(new FullHueSpectrum()),
				new SimpleColorPaletteUI(new DefaultColors(false)),
				new SimpleColorPaletteUI(new DefaultColors(true)),
				new SimpleColorPaletteUI(new BasicColors(true)),
				new ModifierColorPaletteUI(),
				new HSBColorPaletteUI(),
				new HSLColorPaletteUI(),
				new HSLColorPaletteUI(hues,10,7*2)
				
		}, handler);
		ModifierTracker.track(this);
	}
	
	static class FullHueSpectrum extends ColorSet {

		public FullHueSpectrum() {
			super(false);
		}

		@Override
		protected float getHighlightAlpha() {
			return 1;
		}

		@Override
		public int getRGB(float xFraction, float yFraction) {
			if(yFraction<.5) {
				float saturation = yFraction/.5f;
				return Color.HSBtoRGB(xFraction,saturation,1);
			} else {
				float brightness = 1-(yFraction-.5f)/.5f;
				return Color.HSBtoRGB(xFraction,1,brightness);
			}
		}

		@Override
		public Point2D getRelativePoint(int rgb) {
			return new Point2D.Double(.5,.5);
		}
		
	}

}
