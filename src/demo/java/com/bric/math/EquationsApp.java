/*
 * @(#)EquationsApp.java
 *
 * $Date: 2015-02-28 21:59:45 +0100 (Sa, 28 Feb 2015) $
 *
 * Copyright (c) 2011 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.math;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.bric.blog.Blurb;
import com.bric.blog.ResourceSample;
import com.bric.swing.BricApplet;

/** This is a crude UI that implements Gaussian elimination to solve simple variable systems.
 * 
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/EquationsApp/sample.png" alt="new&#160;com.bric.math.EquationsApp()">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@Blurb (
filename = "Equations",
title = "Math: Solving Equations with Gaussian Elimination",
releaseDate = "December 2009",
summary = "I've used the <code><a href=\"https://javagraphics.java.net/doc/com/bric/math/Equations.html\">Equations</a></code> class for a long time now. "+
"(Especially in the <code><a href=\"https://javagraphics.java.net/doc/com/bric/geom/TransformUtils.html\">TransformUtils</a></code> class.)\n"+
"<p>But recently I needed something more.  I ended up making this class to add a light GUI to interface with the <code>Equations</code> class.\n"+
"<p>This is a very minimal, no-frills app.  But it can solve equations for you that might otherwise make your head hurt.  :)",
instructions = "This is a crude UI that implements Gaussian elimination to solve simple variable systems.",
scrapped = "The UI is ugly, and this largely falls outside the scope and intended readership of this blog.",
sandboxDemo = true
)
@ResourceSample( sample="new com.bric.math.EquationsApp()" )
public class EquationsApp extends BricApplet {
	private static final long serialVersionUID = 1L;

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				JFrame f = new JFrame();
				f.getContentPane().add(new EquationsApp());
				f.pack();
				f.setVisible(true);
		        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			}
		});
	}
	
	JLabel label = new JLabel("Number of Variables:");
	JSpinner spinner = new JSpinner(new SpinnerNumberModel(3,2,20,1));
	JButton solve = new JButton("Solve");
	JPanel variables = new JPanel(new GridBagLayout());
	
	public EquationsApp() {

		getContentPane().setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0;
		c.insets = new Insets(4,4,4,4);
		c.weightx = 0; c.weighty = 0;
		c.anchor = GridBagConstraints.EAST;
		getContentPane().add(label, c);
		c.gridx++; c.anchor = GridBagConstraints.WEST; c.weightx = 1;
		getContentPane().add(spinner,c);
		c.gridx++; c.anchor = GridBagConstraints.EAST;
		getContentPane().add(solve,c);
		
		c.gridy++; c.gridx = 0;
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.weighty = 1; c.fill = GridBagConstraints.HORIZONTAL;
		getContentPane().add(variables,c);
		
		solve.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int ctr = ((Number)spinner.getValue()).intValue();
				double[][] array = new double[ctr][ctr+1];
				for(int a = 0; a<variables.getComponentCount(); a++) {
					if(variables.getComponent(a) instanceof JTextField) {
						JTextField jtf = (JTextField)variables.getComponent(a);
						if(jtf.getClientProperty("row")!=null && jtf.getClientProperty("column")!=null) {
							int row = ((Number)jtf.getClientProperty("row")).intValue();
							int column = ((Number)jtf.getClientProperty("column")).intValue();
							double value = Double.parseDouble(jtf.getText());
							array[row][column] = value;
						}
					}
				}
				Equations.solve(array, true);
				for(int a = 0; a<variables.getComponentCount(); a++) {
					if(variables.getComponent(a) instanceof JTextField) {
						JTextField jtf = (JTextField)variables.getComponent(a);
						if(jtf.getClientProperty("row")!=null && jtf.getClientProperty("column")!=null) {
							int row = ((Number)jtf.getClientProperty("row")).intValue();
							int column = ((Number)jtf.getClientProperty("column")).intValue();
							jtf.setText( Double.toString( array[row][column] ));
						}
					}
				}
			}
		});
		spinner.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				updateFields();
			}
		});
		updateFields();
	}
	private void updateFields() {
		variables.removeAll();
		GridBagConstraints c = new GridBagConstraints();
		c.insets = new Insets(2,2,2,2);
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		int ctr = ((Number)spinner.getValue()).intValue();
		for(int column = 0; column < ctr+1; column++) {
			c.gridx = 2*column;
			c.gridy = 0;
			JTextField jtf = new JTextField("v"+(column+1));
			if(column==ctr) {
				jtf.setText("Constant");
				jtf.setEditable(false);
			}
			jtf.setBorder(null);
			jtf.setOpaque(false);
			variables.add(jtf,c);
		}
		for(int row = 0; row < ctr; row++) {
			c.gridy = row+1;
			for(int column = 0; column<ctr+1; column++) {
				JTextField jtf = new JTextField("0.0",6);
				c.weightx = 1;
				c.gridx = 2*column;
				variables.add(jtf,c);
				jtf.putClientProperty("row", new Integer(row));
				jtf.putClientProperty("column", new Integer(column));
				
				if(column==ctr-1) { 
					c.weightx = 0;
					c.gridx = 2*column+1;
					variables.add(new JLabel("="),c);
				}
			}
		}
		
		variables.invalidate();
		variables.revalidate();
	}
}
