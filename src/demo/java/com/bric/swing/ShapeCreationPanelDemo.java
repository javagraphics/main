/*
 * @(#)ShapeCreationPanelDemo.java
 *
 * $Date: 2015-02-28 21:59:45 +0100 (Sa, 28 Feb 2015) $
 *
 * Copyright (c) 2014 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.swing;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JToggleButton;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.bric.blog.Blurb;
import com.bric.blog.ResourceSample;
import com.bric.plaf.CubicPathCreationUI;
import com.bric.plaf.CubicPathCreationUI.Constraint;
import com.bric.plaf.CurvedPolylineCreationUI;
import com.bric.plaf.MouseSmoothingShapeCreationUI;
import com.bric.plaf.ShapeCreationUI;
import com.bric.swing.ShapeCreationPanel.Active;

/** A simple demo for the {@link ShapeCreationPanel} class.
 * 
 * @see <a href="http://javagraphics.blogspot.com/2010/03/shapes-bezier-control-points-data.html">Shapes: Bezier Control Points and Data Models</a>
 * @see <a href="http://javagraphics.blogspot.com/2014/03/shapes-modeling-cubic-shapes-without.html">Shapes: Modeling Cubic Shapes without Complex Input</a>
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/ShapeCreationPanelDemo/sample.png" alt="new&#160;com.bric.swing.ShapeCreationPanelDemo()">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@Blurb (
filename = "ShapeCreationPanelDemo",
title = "Shapes: A ComponentUI to Create and Edit Shapes",
releaseDate = "March 2014",
summary = "This is a UI component that lets the user define shapes. There are currently 3 unique UIs "+
		"to define shapes (each with its own strengths and weaknesses). "+
		"There are a couple of different UIs that can be applied to this, and I haven't yet written up a blog article on the subject.",
instructions = "This applet demonstrates the <code>ShapeCreationPanel</code>.\n"+
		"<p>The first choice is the most important: select one of 3 UI's to create shapes.\n"+
		"<p>To get started, click the toggle button to create a new shape and then "+
		"click in the empty workspace below all the controls. Each UI has different rules for mouse clicks/drags, "+
		"so just experiment to figure things out. To stop creating shapes, usually double-clicking "+
		"exists shape creation mode. (Or you can just toggle the \"Create\" button back off with a click.)\n"+
		"<p>Once you've seen how each UI works, you can test the remaining controls. (Not all controls "+
		"work in all UIs).",
link = "http://javagraphics.blogspot.com/2014/03/shapes-modeling-cubic-shapes-without.html",
sandboxDemo = true
)
@ResourceSample( sample="new com.bric.swing.ShapeCreationPanelDemo()" )
public class ShapeCreationPanelDemo extends BricApplet {

	private static final long serialVersionUID = 1L;

	public static void main(String[] args) {
		JFrame f = new JFrame("ShapeCreationPanel Demo");
		f.getContentPane().add(new ShapeCreationPanelDemo());
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.pack();
		f.setVisible(true);
	}
	
	JToggleButton createButton = new JToggleButton("Create New Path");
	JButton clearButton = new JButton("Clear");
	JPanel controls = new JPanel(new GridBagLayout());
	JComboBox<Active> handles = new JComboBox<Active>();
	JLabel handlesLabel = new JLabel("Handles:");
	JLabel constrainLabel = new JLabel("Constraint:");
	JLabel handleSizeLabel = new JLabel("Handle Size:");
	JComboBox<ShapeCreationUI> uiComboBox = new JComboBox<ShapeCreationUI>();
	JLabel scaleLabel = new JLabel("Handle Scale Factor:");
	JSpinner scale = new JSpinner(new SpinnerNumberModel(1,.05,1.5,.05));
	JSpinner handleSize = new JSpinner(new SpinnerNumberModel(5,3,12,1));
	JComboBox constrain = new JComboBox();
	JSlider zoomSlider = new JSlider();
	JLabel zoomLabel = new JLabel("Zoom:");
	
	ActionListener buttonListener = new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			if(e.getSource()==createButton) {
				shapePanel.setMode( createButton.isSelected() ? 
						ShapeCreationPanel.MODE_CREATE : 
						ShapeCreationPanel.MODE_DEFAULT);
			} else if(e.getSource()==clearButton) {
				for(int a = shapePanel.getDataModel().getShapeCount()-1; a>=0; a--) {
					shapePanel.getDataModel().removeShape(a);
				}
			} else if(e.getSource()==handles) {
				refreshHandlesActive();
			}
		}
	};

	ShapeCreationPanel shapePanel = new ShapeCreationPanel();
	
	public ShapeCreationPanelDemo() {
		getContentPane().setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.fill = GridBagConstraints.BOTH;
		c.weightx = 1; c.weighty = 0;
		getContentPane().add(controls, c);
		c.gridy++; c.weighty = 1;
		getContentPane().add(shapePanel, c);
		shapePanel.setPreferredSize(new Dimension(500,500));
		
		handles.addItem(Active.SELECTED);
		handles.addItem(Active.ALL);
		handles.addItem(Active.OFF);
		
		c = new GridBagConstraints();
		c.insets = new Insets(3,3,3,3);
		c.weightx = 1; c.weighty = 1;
		c.anchor = GridBagConstraints.WEST;
		c.gridx = 0; c.gridy = 0; c.gridwidth = GridBagConstraints.REMAINDER;
		controls.add(uiComboBox, c);
		c.gridy++;
		controls.add(createButton, c);
		c.gridy++;
		controls.add(clearButton, c);
		c.gridy++; c.anchor = GridBagConstraints.EAST; c.gridwidth = 1;
		c.weightx = 0;
		controls.add(handlesLabel, c);
		c.gridy++;
		controls.add(constrainLabel, c);
		c.gridy++;
		controls.add(handleSizeLabel, c);
		c.gridy++;
		controls.add(scaleLabel, c);
		c.gridy++;
		controls.add(zoomLabel, c);
		c.gridy-=4; c.anchor = GridBagConstraints.WEST; c.gridx++;
		c.weightx = 1;
		controls.add(handles, c);
		c.gridy++;
		controls.add(constrain, c);
		c.gridy++;
		controls.add(handleSize, c);
		c.gridy++;
		controls.add(scale, c);
		c.gridy++;
		controls.add(zoomSlider, c);
		
		handles.setToolTipText("Toggles the visibility of the handles.");
		clearButton.setToolTipText("This removes all path information and let's you start again.");
		constrain.setToolTipText("When you edit one control point, this option determines how the opposite control point is affected.");
		createButton.setToolTipText("When this button is selected: click and drag in the preview below to create your shape.");
		createButton.addActionListener(buttonListener);
		clearButton.addActionListener(buttonListener);
		handles.addActionListener(buttonListener);
		scale.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				double scaleFactor = ((Number)scale.getValue()).doubleValue();
				shapePanel.putClientProperty( CubicPathCreationUI.SCALE_FACTOR_KEY, scaleFactor);
			}
		});
		handleSize.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				refreshHandleSize();
			}
		});
		
		zoomSlider.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				refreshZoom();
			}
		});
		
		constrain.addItem("None");
		constrain.addItem("Angles Only");
		constrain.addItem("Angles & Distance");
		
		//override toString methods for the combobox renderer:
		uiComboBox.addItem(new CubicPathCreationUI() {
			@Override
			public String toString() {
				return "CubicPathCreationUI";
			}
		});
		uiComboBox.addItem(new CurvedPolylineCreationUI() {
			@Override
			public String toString() {
				return "CurvedPolylineCreationUI";
			}
		});
		uiComboBox.addItem(new MouseSmoothingShapeCreationUI() {
			@Override
			public String toString() {
				return "MouseSmoothingShapeCreationUI";
			}
		});
		
		uiComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				refreshPanelUI();
			}
		});
		refreshZoom();
		refreshPanelUI();
		refreshHandleSize();
		refreshHandlesActive();
		
		constrain.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(constrain.getSelectedIndex()==1) {
					shapePanel.putClientProperty( CubicPathCreationUI.CONSTRAINT_KEY, Constraint.ANGLE_ONLY );
				} else if(constrain.getSelectedIndex()==2) {
					shapePanel.putClientProperty( CubicPathCreationUI.CONSTRAINT_KEY, Constraint.ANGLE_AND_DISTANCE );
				} else {
					shapePanel.putClientProperty( CubicPathCreationUI.CONSTRAINT_KEY, Constraint.NONE );
				}
			}
		});
		
		controls.setBackground(Color.white);
		shapePanel.setBackground(Color.white);
		createButton.setOpaque(false);
		clearButton.setOpaque(false);
		handles.setOpaque(false);
		constrain.setOpaque(false);
		scale.setOpaque(false);
		
		shapePanel.addPropertyChangeListener( ShapeCreationPanel.MODE_KEY, new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				createButton.setSelected( ShapeCreationPanel.MODE_CREATE.equals(shapePanel.getMode()) );
			}
		});
		
		shapePanel.setBackground(Color.white);
		shapePanel.setOpaque(true);
	}
	
	private void refreshZoom() {
		int w = shapePanel.getWidth();
		int h = shapePanel.getHeight();
		AffineTransform tx = new AffineTransform();
		double s = Math.max( ((double)zoomSlider.getValue())/50.0, .01);
		tx.translate(w/2, h/2);
		tx.scale(s, s);
		tx.translate(-w/2, -h/2);
		shapePanel.setTransform(tx);
	}
	
	private void refreshPanelUI() {
		shapePanel.setUI( (ShapeCreationUI)uiComboBox.getSelectedItem() );
	}
	
	private void refreshHandleSize() {
		int h = ((Number)handleSize.getValue()).intValue();
		shapePanel.setHandleSize(h);
	}
	
	private void refreshHandlesActive() {
		shapePanel.setHandlesActive( (Active)handles.getSelectedItem() );
	}
}
