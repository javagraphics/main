/*
 * @(#)TransitionPanelDemo.java
 *
 * $Date: 2015-02-28 21:59:45 +0100 (Sa, 28 Feb 2015) $
 *
 * Copyright (c) 2014 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.swing;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

import com.bric.blog.Blurb;
import com.bric.blog.ResourceSample;
import com.bric.image.transition.FlipTransition3D;
import com.bric.image.transition.PushTransition2D;
import com.bric.image.transition.ReversedTransition;
import com.bric.image.transition.Transition;
import com.bric.image.transition.ZoomTransition2D;
import com.bric.plaf.GradientPanelUI;
import com.bric.swing.resources.TriangleIcon;


/** This demos the {@link TransitionPanel} by offering 3 different transitions that iterate
 * an integer value up or down. The {@link TransitionPanelDemoHelper} renders the following
 * animation of this app:
 * <p><img src="https://javagraphics.java.net/resources/transitionpanel.gif" style="clear: right; margin-bottom: 1em; margin-left: 1em;border:1px solid gray" alt="Sample Animation of TransitionPanel">
 * <br>
 *
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/TransitionPanelDemo/sample.png" alt="new&#160;com.bric.swing.TransitionPanelDemo()">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@Blurb (
filename = "TransitionPanel",
title = "Panels: Refreshes and Transitions",
releaseDate = "March 2014",
summary = "This panel builds on the <a href=\"http://javagraphics.blogspot.com/2007/04/slideshows-transitions-swf.html\">"+
		"Transition</a> architecture to let certain refreshes occur with a transition.",
instructions = "This applet demonstrates the <Code>TransitionPanel</code>.\n"+
	"<p>The buttons on the right iterate the large counter upwards (each using a different transition), "+
	"and the buttons on the left reverse the counter using the opposite transition.\n"+
	"<p>The spinner in the middle controls the time the transition takes.\n"+
	"<p>Also try placing the cursor inside the panel and scrolling horizontally. (On a touchpad: do a two-fingered swipe.)",
	link = "http://javagraphics.blogspot.com/2014/03/panels-refreshes-and-transitions.html",
	sandboxDemo = true
)
@ResourceSample( sample="new com.bric.swing.TransitionPanelDemo()" )
public class TransitionPanelDemo extends BricApplet {
	private static final long serialVersionUID = 1L;

	/** A simple demo of the TransitionTabbedPane. 
     * @param args the application's arguments. (This is unused.)
     */
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				JFrame f = new JFrame();
				f.getContentPane().add(new TransitionPanelDemo());
				f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		        
				f.pack();
				f.setVisible(true);
			}
		});
	}
	
	TransitionPanel transitionPanel = new TransitionPanel();
	int value = 123;
	JLabel label = new JLabel(""+value);
	JSpinner durationSpinner = new JSpinner(new SpinnerNumberModel(.25, .1, 5, .05));
	JButton defaultIncrementButton, defaultDecrementButton;
	int timeMultiplier;

	JButton[] pair1 = createButtons(new FlipTransition3D(FlipTransition3D.LEFT, true, Color.white), true);
	JButton[] pair2 = createButtons(new PushTransition2D(Transition.LEFT), true);
	JButton[] pair3 = createButtons(new ZoomTransition2D(Transition.RIGHT, false), false);
	
	public TransitionPanelDemo() {
		this(1);
	}
	
	/**
	 * 
	 * @param timeMultiplier this slows down animations by a given factor.
	 * This is used for debugging or creating a demo.
	 */
	public TransitionPanelDemo(int timeMultiplier) {
		this.timeMultiplier = timeMultiplier;
		
		getContentPane().setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.weightx = 0; c.weighty = 1;
		c.insets = new Insets(6,6,6,6);
		defaultDecrementButton = pair2[0];
		defaultIncrementButton = pair2[1];
		
		getContentPane().add(pair1[0], c);
		c.gridy++;
		getContentPane().add(pair2[0], c);
		c.gridy++;
		getContentPane().add(pair3[0], c);
		
		c.gridx++;
		c.gridy = 0; c.gridheight = GridBagConstraints.REMAINDER; c.weightx = 1;
		c.fill = GridBagConstraints.BOTH;
		getContentPane().add(transitionPanel, c);
		
		c.gridy = 0; c.gridx++; c.gridheight = 1; c.weightx = 0;
		getContentPane().add(pair1[1], c);
		c.gridy++;
		getContentPane().add(pair2[1], c);
		c.gridy++;
		getContentPane().add(pair3[1], c);
		
		transitionPanel.getBody().setLayout(new GridBagLayout());
		c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.weightx = 1; c.weighty = 1;
		c.fill = GridBagConstraints.BOTH; c.gridwidth = 2;
		c.insets = new Insets(5,5,5,5);
		transitionPanel.getBody().add(label, c);
		c.fill = GridBagConstraints.NONE; c.weightx = 1;
		c.gridy++; c.gridwidth = 1; c.anchor = GridBagConstraints.EAST;
		c.insets = new Insets(5,5,5,1);
		transitionPanel.getBody().add(new JLabel("Duration:"), c);
		c.gridx++; c.anchor = GridBagConstraints.WEST;
		c.insets = new Insets(5,1,5,5);
		transitionPanel.getBody().add(durationSpinner, c);
		
		label.setFont(new Font("Impact", 0, 48));
		label.setHorizontalAlignment(SwingConstants.CENTER);
		refreshLabel();
		
		getContentPane().setBackground(Color.white);

        transitionPanel.getBody().addMouseWheelListener(new MouseWheelListener() {

        	int movement = 0;
            public void mouseWheelMoved(MouseWheelEvent event) {
                if (event.isShiftDown()) { //if it's horizontal
                	if(transitionPanel.isAnimating())
                		return;
                	
                	movement += event.getWheelRotation();
                	
                	if(movement>transitionPanel.getBody().getWidth()/6) {
                    	defaultIncrementButton.doClick();
                    	movement = 0;
                	} else if(movement< -transitionPanel.getBody().getWidth()/6) {
                    	defaultDecrementButton.doClick();
                    	movement = 0;
                	}
                    event.consume();
                }
            }
        });
	}
	
	protected JButton[] createButtons(final Transition t,boolean isTransitionForDecrement) {
		if(isTransitionForDecrement) {
			return new JButton[] { createButton(-1, new ReversedTransition(t)), createButton(1, t)};
		}
		return new JButton[] { createButton(-1, t), createButton(1, new ReversedTransition(t)) };
	}
	
	protected JButton createButton(final int delta,final Transition t) {
		JButton button = new JButton();
		button.setBorderPainted(false);
		button.setContentAreaFilled(false);
		
		button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Runnable runnable = new Runnable() {
					public void run() {
						value += delta;
						refreshLabel();
					}
				};
				float duration = ((Number)durationSpinner.getValue()).floatValue() * timeMultiplier;
				transitionPanel.startTransition(t, runnable, duration);
			}
		});
		if(delta<0) {
			button.setIcon(new TriangleIcon(SwingConstants.WEST, 20, 20));
			button.setRolloverIcon(new TriangleIcon(SwingConstants.WEST, 20, 20, Color.black));
			button.setPressedIcon(new TriangleIcon(SwingConstants.WEST, 20, 20, Color.gray));
		} else {
			button.setIcon(new TriangleIcon(SwingConstants.EAST, 20, 20));
			button.setRolloverIcon(new TriangleIcon(SwingConstants.EAST, 20, 20, Color.black));
			button.setPressedIcon(new TriangleIcon(SwingConstants.EAST, 20, 20, Color.gray));
		}
		return button;
	}
	
	protected void refreshLabel() {
		label.setText(""+value);
		transitionPanel.getBody().setOpaque(true);
		if(value%2==0) {
			transitionPanel.getBody().setUI(new GradientPanelUI(Color.white, Color.lightGray));
		} else {
			transitionPanel.getBody().setUI(new GradientPanelUI(Color.lightGray, Color.white));
		}
	}
}
