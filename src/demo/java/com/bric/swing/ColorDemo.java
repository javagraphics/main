/*
 * @(#)ColorDemo.java
 *
 * $Date: 2015-02-28 21:59:45 +0100 (Sa, 28 Feb 2015) $
 *
 * Copyright (c) 2011 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.swing;

import java.awt.Adjustable;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.geom.Point2D;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;

import com.bric.awt.ModifierTracker;
import com.bric.blog.Blurb;
import com.bric.blog.ResourceSample;
import com.bric.plaf.ColorPaletteUI;
import com.bric.plaf.ColorSet;
import com.bric.plaf.HSLColorPaletteUI;
import com.bric.plaf.HueDistribution;
	
/** This app demos several color-related GUI components: {@link ColorPicker},
 * {@link ColorWell}, and {@link ColorPalette}.
 * 
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/ColorDemo/sample.png" alt="new&#160;com.bric.swing.ColorDemo()">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@Blurb (
filename = "Colors",
title = "Colors: a Good GUI for Selecting Colors",
releaseDate = "January 2010",
summary = "This jar includes <i>all</i> my color-related GUI components: "+
"the <code><a href=\"https://javagraphics.java.net/doc/com/bric/swing/ColorPicker.html\">ColorPicker</a></code>, "+
"the <code><a href=\"https://javagraphics.java.net/doc/com/bric/swing/ColorWell.html\">ColorWell</a></code>, and "+
"the <code><a href=\"https://javagraphics.java.net/doc/com/bric/swing/ColorPalette.html\">ColorPalette</a></code>.\n"+
"<p>I'm not going to argue that this will meet your needs and save the world; but it includes a lot of useful tools "+
"and it might help (save the world).",
instructions = "This applet is the final draft of a series of experiments in designing a " +
		"color-choosing component that is meant to be concise, helpful, and aesthetic.",
link = "http://javagraphics.blogspot.com/2010/01/colors-good-gui-for-selecting-colors.html",
sandboxDemo = true
)
@ResourceSample( sample="new com.bric.swing.ColorDemo()" )
public class ColorDemo extends BricApplet {
	private static final long serialVersionUID = 1L;
	
	public static void main(String[] args) {
		JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.getContentPane().add(new ColorDemo());
		f.pack();
		f.setVisible(true);
		
	}
	
	static GraySet GRAY_SET = new GraySet(true,9,2);
	
	ColorPalette grays = new ColorPalette();
	ColorPalette colors = new ColorPalette();
	ColorWell well = new ColorWell();
	
	JPanel panel1 = new JPanel(new GridBagLayout());
	JPanel panel2 = new JPanel(new GridBagLayout());
	
	private static int getCellHeight() {
		JScrollBar s = new JScrollBar(Adjustable.HORIZONTAL);
		return s.getPreferredSize().height;
	}
	
	public ColorDemo() {
		grays.putClientProperty(ColorPaletteUI.PREFERRED_CELL_HEIGHT_PROPERTY, new Integer(getCellHeight()));
		colors.putClientProperty(ColorPaletteUI.PREFERRED_CELL_HEIGHT_PROPERTY, new Integer(getCellHeight()));
		grays.putClientProperty(ColorSet.PALETTE_STYLE_PROPERTY, ColorSet.PALETTE_STYLE_STREAKS);
		colors.putClientProperty(ColorSet.PALETTE_STYLE_PROPERTY, ColorSet.PALETTE_STYLE_STREAKS);
		grays.putClientProperty(ColorSet.PALETTE_CELL_STYLE_PROPERTY, ColorSet.PALETTE_CELL_STYLE_SCRIBBLE);
		colors.putClientProperty(ColorSet.PALETTE_CELL_STYLE_PROPERTY, ColorSet.PALETTE_CELL_STYLE_SCRIBBLE);
		colors.putClientProperty("autoScroll",Boolean.FALSE);

		grays.setUI(new GrayUI());
		HueDistribution hues = new HueDistribution(new float[] {0, //red
				1f/12f, //orange
				1f/6f, //yellow
				1f/3f, //green
				1f/2f, //cyan
				2f/3f, //blue
				2f/3f+1f/12f, //purple 1
				2f/3f+2f/12f, //purple 2
				1, //full circle
				});
		HSLColorPaletteUI hslUI = new HSLColorPaletteUI(hues,8,8);
		colors.setUI(hslUI);
		JScrollBar vBar = hslUI.getVerticalScrollBar(colors);
		vBar.setValue(vBar.getMinimum());
		
		getContentPane().setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0;
		c.weightx = 0; c.weighty = 1;
		c.insets = new Insets(3,3,3,3);
		c.fill = GridBagConstraints.BOTH;
		panel2.add(grays,c);
		c.gridx++; c.weightx = 1;
		panel2.add(colors,c);
		
		c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; 
		c.insets = new Insets(5, 5, 5, 5);
		c.weightx = 0; c.weighty = 1;
		c.anchor = GridBagConstraints.EAST;
		panel1.add(new JLabel("Color:"), c);
		c.gridx++; c.weightx = 1;
		c.anchor = GridBagConstraints.WEST;
		panel1.add(well, c);
		
		c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0;
		c.weightx = 1; c.weighty = 0;
		c.anchor = GridBagConstraints.NORTH;
		c.insets = new Insets(10,4,10,4);
		c.fill = GridBagConstraints.HORIZONTAL;
		getContentPane().add(panel1, c);
		c.gridy++;
		getContentPane().add(panel2, c);
		
		colors.bind(grays);
		colors.bind(well);
		
		panel1.setOpaque(false);
		panel2.setOpaque(false);
		
		getContentPane().setBackground(Color.white);
		
		ModifierTracker.track(this);
	}
	
	static class GrayUI extends ColorPaletteUI {
		@Override
		protected ColorSet getColorSet(ColorPalette cp) {
			return GRAY_SET;
		}
	}
	
	static class GraySet extends ColorSet {

		public GraySet(boolean grid, int rows, int columns) {
			super(grid, rows, columns);
		}

		@Override
		protected float getHighlightAlpha() {
			return 1;
		}

		@Override
		public int getRGB(float xFraction, float yFraction) {
			int alpha;
			int gray;
			if(xFraction<.5) {
				gray = 255;
				alpha = (int)(255*yFraction);
			} else {
				gray = 0;
				alpha = (int)(255-255*yFraction);
			}
			return (alpha << 24) + (gray << 16) + (gray << 8) + (gray);
		}

		@Override
		public Point2D getRelativePoint(int rgb) {
			int a = (rgb >> 24) & 0xff;
			int r = (rgb >> 16) & 0xff;
			int g = (rgb >> 8) & 0xff;
			int b = (rgb >> 0) & 0xff;
			int gray = (r+g+b)/3;
			float alpha = (a)/255f;
			if(gray<0) {
				return new Point2D.Double(1.0/3.0, alpha);
			} else {
				return new Point2D.Double(2.0/3.0, 1-alpha);
			}
		}
		
	}
}
