/*
 * @(#)TextComponentHighlighterDemo.java
 *
 * $Date: 2015-12-27 07:23:26 +0100 (So, 27 Dez 2015) $
 *
 * Copyright (c) 2015 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.text;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Highlighter.HighlightPainter;

import com.bric.blog.Blurb;
import com.bric.blog.ResourceSample;
import com.bric.io.Token;
import com.bric.swing.JavaTextComponentHighlighter;
import com.bric.swing.LineNumberBorder;

/** This little demo app combines the {@link JavaTextComponentHighlighter}
 * with a {@link com.bric.swing.LineNumberBorder} and demos a {@link TextBoxHighlightPainter}.
 *
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/JavaTextComponentHighlighterDemo/sample.png" alt="new&#160;com.bric.text.JavaTextComponentHighlighterDemo()">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@Blurb (
filename = "JavaTextComponentHighlighterDemo",
title = "Text: Formatting Source Code in Swing",
releaseDate = "December 2015",
summary = "This article discusses how to set up a <code>JTextPane</code> to render Java source code with "+
		"stylized font attributes and line numbers.",
link = "http://javagraphics.blogspot.com/2015/12/text-formatting-source-code-in-swing.html",
sandboxDemo = true
)
@ResourceSample( sample = { "new com.bric.text.JavaTextComponentHighlighterDemo(true)" } )
public class JavaTextComponentHighlighterDemo extends JFrame {
	private static final long serialVersionUID = 1L;

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				JFrame f = new JavaTextComponentHighlighterDemo(true);
				f.pack();
				f.setVisible(true);
			}
		});
	}
	
	JTextPane textPane = new JTextPane();
	JScrollPane scrollPane = new JScrollPane(textPane);
	Map<String, Float> boxHues = new HashMap<String, Float>();
	JLabel highlightLabel = new JLabel("Highlight:");
	JTextField highlightTextField = new JTextField("class");
	JavaTextComponentHighlighter highlighter;
	
	public JavaTextComponentHighlighterDemo(boolean includeHighlightControls) {
		super("JavaTextComponentHighlighterDemo");
		
		LineNumberBorder.install(scrollPane, textPane);
		
		textPane.setText("package com.org.net;\n\nimport java.util.*;\n\npublic class Foo {\n\n\tFoo() {\n\t\tSystem.out.println(\"Foo\");\n\t}\n}");
		getContentPane().setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0; c.weightx = 0; c.weighty = 0;
		c.insets = new Insets(4,4,4,4);
		c.fill = GridBagConstraints.BOTH;
		getContentPane().add(highlightLabel, c);
		c.gridx++; c.weightx = 1;
		getContentPane().add(highlightTextField, c);
		c.gridx = 0; c.gridy++; c.weighty = 1;
		c.insets = new Insets(0, 0, 0, 0);
		c.gridwidth = GridBagConstraints.REMAINDER;
		getContentPane().add(scrollPane, c);
		scrollPane.setPreferredSize(new Dimension(400, 200));
		
		highlightLabel.setVisible(includeHighlightControls);
		highlightTextField.setVisible(includeHighlightControls);
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		highlightTextField.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void insertUpdate(DocumentEvent e) {
				highlighter.refresh(true);
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				highlighter.refresh(true);
			}

			@Override
			public void changedUpdate(DocumentEvent e) {}
			
		});
		
		highlighter = new JavaTextComponentHighlighter(textPane) {

			@Override
			protected HighlightPainter getHighlightPainter(Token[] allTokens,
					int tokenIndex, int selectionStart, int selectionEnd) {
				if(allTokens[tokenIndex].getText().equalsIgnoreCase(highlightTextField.getText())) {
					return new TextBoxHighlightPainter( .2f, true );
				}
				
				return null;
			}
		};
	}
}
