/*
 * @(#)ModifierColorPaletteUI.java
 *
 * $Date: 2014-06-06 20:04:49 +0200 (Fr, 06 Jun 2014) $
 *
 * Copyright (c) 2011 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.plaf;

import javax.swing.JComponent;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.ComponentUI;

import com.bric.awt.ModifierTracker;
import com.bric.blog.ResourceSample;
import com.bric.swing.ColorPalette;
import com.bric.util.JVM;

/** This is a {@link FadingColorPaletteUI} that changes the color set in use
 * based on keyboard modifiers.
 * 
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p>Here are the different possible color sets this UI uses:
 * <table summary="Resource&#160;Samples&#160;for&#160;com.bric.plaf.ModifierColorPaletteUI"><tr>
 * <td></td>
 * <td><img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_DEFAULT_GRID.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_DEFAULT_GRID.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"></td>
 * <td><img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_MUTED_GRID.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_MUTED_GRID.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"></td>
 * <td><img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_FLESH_GRID.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_FLESH_GRID.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"></td>
 * <td><img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_EARTH_GRID.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_EARTH_GRID.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"></td>
 * </tr><tr>
 * <td></td>
 * <td>SHEET_DEFAULT_GRID</td>
 * <td>SHEET_MUTED_GRID</td>
 * <td>SHEET_FLESH_GRID</td>
 * <td>SHEET_EARTH_GRID</td>
 * </tr><tr>
 * <td></td>
 * <td><img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_DEFAULT_CONTINUOUS.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_DEFAULT_CONTINUOUS.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"></td>
 * <td><img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_MUTED_CONTINUOUS.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_MUTED_CONTINUOUS.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"></td>
 * <td><img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_FLESH_CONTINUOUS.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_FLESH_CONTINUOUS.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"></td>
 * <td><img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_EARTH_CONTINUOUS.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_EARTH_CONTINUOUS.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"></td>
 * </tr><tr>
 * <td></td>
 * <td>SHEET_DEFAULT_CONTINUOUS</td>
 * <td>SHEET_MUTED_CONTINUOUS</td>
 * <td>SHEET_FLESH_CONTINUOUS</td>
 * <td>SHEET_EARTH_CONTINUOUS</td>
 * </tr><tr>
 * </tr></table>
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@ResourceSample(sample = { 
		" com.bric.plaf.ModifierColorPaletteUI.SHEET_DEFAULT_GRID.paintSample( new java.awt.Dimension(160, 120), true ) ",
		" com.bric.plaf.ModifierColorPaletteUI.SHEET_MUTED_GRID.paintSample( new java.awt.Dimension(160, 120), true ) ",
		" com.bric.plaf.ModifierColorPaletteUI.SHEET_FLESH_GRID.paintSample( new java.awt.Dimension(160, 120), true ) ",
		" com.bric.plaf.ModifierColorPaletteUI.SHEET_EARTH_GRID.paintSample( new java.awt.Dimension(160, 120), true ) ",

		" com.bric.plaf.ModifierColorPaletteUI.SHEET_DEFAULT_CONTINUOUS.paintSample( new java.awt.Dimension(160, 120), true ) ",
		" com.bric.plaf.ModifierColorPaletteUI.SHEET_MUTED_CONTINUOUS.paintSample( new java.awt.Dimension(160, 120), true ) ",
		" com.bric.plaf.ModifierColorPaletteUI.SHEET_FLESH_CONTINUOUS.paintSample( new java.awt.Dimension(160, 120), true ) ",
		" com.bric.plaf.ModifierColorPaletteUI.SHEET_EARTH_CONTINUOUS.paintSample( new java.awt.Dimension(160, 120), true ) "
		
		},
	names = { "SHEET_DEFAULT_GRID", "SHEET_MUTED_GRID", "SHEET_FLESH_GRID", "SHEET_EARTH_GRID",
		"SHEET_DEFAULT_CONTINUOUS", "SHEET_MUTED_CONTINUOUS", "SHEET_FLESH_CONTINUOUS", "SHEET_EARTH_CONTINUOUS"},
	tableIntroduction = "Here are the different possible color sets this UI uses:")
public class ModifierColorPaletteUI extends FadingColorPaletteUI {

	/** <img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_DEFAULT_GRID.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_DEFAULT_GRID.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"> */
	public static final ColorSet SHEET_DEFAULT_GRID = new DefaultColors(true,10,12);
	
	/** <img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_MUTED_GRID.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_MUTED_GRID.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"> */
	public static final ColorSet SHEET_MUTED_GRID = new MutedColors(true,10,11);
	
	/** <img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_FLESH_GRID.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_FLESH_GRID.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"> */
	public static final ColorSet SHEET_FLESH_GRID = new FleshColors(true,8,7);
	
	/** <img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_EARTH_GRID.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_EARTH_GRID.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"> */
	public static final ColorSet SHEET_EARTH_GRID = new EarthColors(true,8,7);
	
	/** <img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_DEFAULT_CONTINUOUS.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_DEFAULT_CONTINUOUS.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"> */
	public static final ColorSet SHEET_DEFAULT_CONTINUOUS = new DefaultColors(false,10,12); //giving a # of columns makes gray column size same as grid
	
	/** <img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_MUTED_CONTINUOUS.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_MUTED_CONTINUOUS.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"> */
	public static final ColorSet SHEET_MUTED_CONTINUOUS = new MutedColors(false);
	
	/** <img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_FLESH_CONTINUOUS.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_FLESH_CONTINUOUS.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"> */
	public static final ColorSet SHEET_FLESH_CONTINUOUS = new FleshColors(false);
	
	/** <img src="https://javagraphics.java.net/resources/samples/ModifierColorPaletteUI/SHEET_EARTH_CONTINUOUS.png" alt="&#160;com.bric.plaf.ModifierColorPaletteUI.SHEET_EARTH_CONTINUOUS.paintSample(&#160;new&#160;java.awt.Dimension(160,&#160;120),&#160;true&#160;)&#160;"> */
	public static final ColorSet SHEET_EARTH_CONTINUOUS = new EarthColors(false);
	/**  */
	
	public static ComponentUI createUI(JComponent jc) {
		return new ModifierColorPaletteUI();
	}
	
	public ModifierColorPaletteUI() {}
	
	protected void updateSheet(ColorPalette cp) {
		
		boolean control;
		if(JVM.isMac) {
			control = ModifierTracker.isMetaDown();
		} else {
			control = ModifierTracker.isControlDown() ;
		}
		if(ModifierTracker.isShiftDown()) {
			if(ModifierTracker.isAltDown() && control) {
				setColors(cp,SHEET_EARTH_CONTINUOUS, EFFECT_FADE);
			} else if(ModifierTracker.isAltDown()) {
				setColors(cp,SHEET_MUTED_CONTINUOUS, EFFECT_FADE);
			} else if(control) {
				setColors(cp,SHEET_FLESH_CONTINUOUS, EFFECT_FADE);
			} else {
				setColors(cp,SHEET_DEFAULT_CONTINUOUS, EFFECT_FADE);
			}
		} else {
			if(ModifierTracker.isAltDown() && control) {
				setColors(cp,SHEET_EARTH_GRID, EFFECT_FADE);
			} else if(ModifierTracker.isAltDown()) {
				setColors(cp,SHEET_MUTED_GRID, EFFECT_FADE);
			} else if(control) {
				setColors(cp,SHEET_FLESH_GRID, EFFECT_FADE);
			} else {
				setColors(cp,SHEET_DEFAULT_GRID, EFFECT_FADE);
			}
		}
	}

	@Override
	public void installUI(final JComponent c) {
		super.installUI(c);
		ChangeListener modifierListener = new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				updateSheet( (ColorPalette)c);
			}
		};
		c.putClientProperty("colorPaletteModifierListener", modifierListener);
		ModifierTracker.addAltChangeListener(modifierListener);
		ModifierTracker.addControlChangeListener(modifierListener);
		ModifierTracker.addShiftChangeListener(modifierListener);
		ModifierTracker.addControlChangeListener(modifierListener);
		ModifierTracker.addMetaChangeListener(modifierListener);
		updateSheet( (ColorPalette)c);
	}

	@Override
	public void uninstallUI(JComponent c) {
		super.uninstallUI(c);
		ChangeListener modifierListener = (ChangeListener)c.getClientProperty("colorPaletteModifierListener");
		ModifierTracker.removeAltChangeListener(modifierListener);
		ModifierTracker.removeControlChangeListener(modifierListener);
		ModifierTracker.removeShiftChangeListener(modifierListener);
		ModifierTracker.removeControlChangeListener(modifierListener);
		ModifierTracker.removeMetaChangeListener(modifierListener);
	}
}
