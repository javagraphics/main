/*
 * @(#)UpDownIcon.java
 *
 * $Date: 2014-06-06 20:04:49 +0200 (Fr, 06 Jun 2014) $
 *
 * Copyright (c) 2014 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.swing.resources;

import java.awt.Component;
import java.awt.Graphics;

import javax.swing.Icon;
import javax.swing.SwingConstants;

import com.bric.blog.ResourceSample;


/** An icon that includes both an up triangle and a down triangle with a little
 * vertical padding in-between.
 * <p>This is used to indicate choices above and below. For example a button
 * that triggers a popup menu might include this icon.
 *
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/UpDownIcon/sample.png" alt="new&#160;com.bric.swing.resources.UpDownIcon(&#160;5,&#160;4,&#160;3)">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@ResourceSample( sample= { "new com.bric.swing.resources.UpDownIcon( 5, 4, 3)" })
public class UpDownIcon implements Icon {
	
	public final TriangleIcon downIcon, upIcon;
	public final int trianglePadding;

	public UpDownIcon(int triangleWidth,int triangleHeight,int trianglePadding) {
		downIcon = new TriangleIcon( SwingConstants.SOUTH, triangleWidth, triangleHeight);
		upIcon = new TriangleIcon( SwingConstants.NORTH, triangleWidth, triangleHeight);
		this.trianglePadding = trianglePadding;
	}
	
	public int getIconHeight() {
		return downIcon.getIconHeight() + upIcon.getIconHeight() + trianglePadding;
	}

	public int getIconWidth() {
		return Math.max(downIcon.getIconWidth(), upIcon.getIconWidth());
	}

	public void paintIcon(Component c, Graphics g, int x, int y) {
		upIcon.paintIcon(c, g, x, y);
		downIcon.paintIcon(c, g, x, y + upIcon.getIconHeight() + trianglePadding);
	}
	
}
