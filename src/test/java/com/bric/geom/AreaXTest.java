/*
 * @(#)AreaXTest.java
 *
 * $Date: 2014-11-27 07:56:11 +0100 (Do, 27 Nov 2014) $
 *
 * Copyright (c) 2014 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.geom;

import java.awt.Shape;

import junit.framework.TestCase;

public class AreaXTest extends TestCase {
	
	/** This came to my attention working on the word search with two overlapping T's.
	 */
	public void testOverlappingTs() {
		Shape s1 = ShapeStringUtils.createGeneralPath("m 315.6797 21.703125 l 314.2174 23.1654 l 312.68347 24.552372 l 312.55847 27.036747 l 312.62827 27.113928 l 312.5547 27.1875 l 314.01694 28.649736 l 314.5386 29.22669 l 314.9859 30.059895 l 315.19196 29.949276 l 315.40393 30.18371 l 315.4811 30.113924 l 315.5547 30.1875 l 315.85156 30.1875 l 316.21875 29.820312 l 316.21875 33.2361 l 316.17053 33.55602 l 314.71875 35.007812 l 314.71875 35.296875 l 315.41202 35.990143 l 315.33398 36.18411 l 315.78906 36.367184 l 317.71875 38.296875 l 322.21094 38.296875 l 324.32486 36.18295 l 324.66733 36.021408 l 324.60934 35.89847 l 325.21094 35.296875 l 325.21094 35.007812 l 323.78415 33.581013 l 323.71875 33.20322 l 323.71875 29.757812 l 324.14844 30.1875 l 324.4453 30.1875 l 324.5144 30.11841 l 324.58667 30.184168 l 324.73962 30.016075 l 324.87604 30.097927 l 325.28436 29.417414 l 325.98074 28.65208 l 327.4453 27.1875 l 327.37622 27.118416 l 327.442 27.046148 l 327.3248 24.561773 l 325.79276 23.167768 l 324.32812 21.703125 z");
		Shape s2 = ShapeStringUtils.createGeneralPath("m 313.78955 7.385742 l 312.32727 8.848021 l 310.79333 10.234989 l 310.61365 13.806278 l 310.68344 13.88346 l 310.60986 13.957031 l 312.0721 15.419268 l 312.91348 16.34979 l 313.17096 16.829426 l 313.28958 16.765747 l 313.4591 16.953241 l 313.5363 16.883455 l 313.60986 16.957031 l 314.03662 16.957031 l 315.3155 15.678151 l 315.87695 15.376741 l 315.87695 22.75026 l 315.82828 23.073288 l 315.81625 23.103182 l 313.7207 25.19873 l 313.7207 25.614258 l 316.7207 28.614258 l 323.17822 28.614258 l 326.17822 25.614258 l 326.17822 25.19873 l 324.1036 23.124105 l 324.0332 22.71738 l 324.0332 15.272792 l 324.64804 15.641697 l 325.96338 16.957031 l 326.39014 16.957031 l 326.45923 16.887941 l 326.5315 16.9537 l 326.63858 16.836016 l 326.69098 16.867458 l 326.84784 16.606047 l 327.92557 15.421614 l 329.39014 13.957031 l 329.32104 13.887947 l 329.3868 13.81568 l 329.21835 10.2443905 l 327.6863 8.850383 l 326.22168 7.385742 z");
		AreaX a1 = new AreaX(s1);
		AreaX a2 = new AreaX(s2);
		assertTrue(a1.intersects(s2));
		assertTrue(a2.intersects(a1));
	}
}
